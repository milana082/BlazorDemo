@page "/"
@using CrudOperations.Models;
@using BlazorApp1.Services;
@using BlazorApp1.Shared;
@inject IBrandServices _brandServices;
@inject EmailService emailService;
@inject Microsoft.AspNetCore.Components.NavigationManager navigation


<PageTitle>Index</PageTitle>

<section>
    <div class="container">
        <div class="Heading-wrapper" style="display: flex;justify-content: space-between;">
            <div class="title"><h3>Brand List</h3></div>
            <div style="display: flex;">
                <div>
                    <p style="margin-top: 5px; margin-bottom: 0rem; margin-right:5px;font-weight: bold;">Find By Name:</p>
                </div>
                <input type="text" class="form-control" placeholder="Search" style="margin-right:10px; width: 50%; padding: 5px 32px;margin-top: 0;" @bind="Query">
                <div>
                    <button class="btn btn-outline-secondary" type="button" @onclick="(async () => await Search())">Search</button>
                </div>
            </div>
            <a href="AddBrand">
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#add-brand">
                    Add Brand
                </button>
            </a>
            <button type="button" class="btn btn-primary" @onclick="SendEmail">Send Email</button>
        </div>
        <hr />

        <div class="row">
            <div class="col">
                <label style="font-weight: bold;">Filter by Date:</label>
                <label>From:</label>
                <input type="date" @bind="startDate" />
                <label>To:</label>
                <input type="date" @bind="endDate" />
            </div>
            <div class="col">
                <a href="RestApi">
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#add-brand">
                        Rest Api
                    </button>
                </a>
            </div>
        </div>
        <hr />
        @if (brandList == null)
        {
            <h4>Loading....</h4>
        }
        else
        {
            @if (brandList.Any())
            {
                <table class="table table-striped table-bordered bg-light">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Category</th>
                            <th>IsActive</th>
                            <th>LastUpdated</th>
                            <th>Changes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in brandList.Where(d => d.LastUpdated.Date >= startDate.Date && d.LastUpdated.Date <= endDate.Date))
                        {
                            <tr>
                                <td>@item.ID</td>
                                <td>@item.Name</td>
                                <td>@item.Category</td>
                                <td>@item.IsActive</td>
                                <td>@item.LastUpdated.ToShortDateString()</td>
                                <td>
                                    <a href="EditBrand/@item.ID">
                                        <button class="edit-btn" data-toggle="modal" data-target="#edit">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                                <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                            </svg>
                                        </button>
                                    </a>
                                    <a>
                                        <button class="delete-btn" data-toggle="modal" data-target="#delete" @onclick="() => DeleteBrand(item.ID)">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                                <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z" />
                                            </svg>
                                        </button>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    </div>
</section>

@code {
    private string? Query { get; set; }

    private List<Brand> brandList = new List<Brand>();


    private DateTime startDate = new DateTime(); //(2023, 3 ,30)format
    private DateTime endDate = DateTime.Today;


    protected override async Task OnInitializedAsync()
    {
        await GetBrands();

    }
    private async Task GetBrands()
    {
        brandList = await _brandServices.GetBrands(null);
    }

    public async void DeleteBrand(int id)
    {
        Brand brand = new Brand();
        brand = brandList.Where(r => r.ID == id).FirstOrDefault();
        var flag = await _brandServices.DeleteBrand(id);
        if (flag)
        {
            brandList.Remove(brand);
            base.ShouldRender();
            StateHasChanged();
            navigation.NavigateTo("/");
        }
    }

    public async Task Search()
    {
        brandList = await _brandServices.GetBrands(Query);
    }
    private void SendEmail()
    {
        string recipientEmail = "testdemo3105@gmail.com";
        string subject = "Example Email";
        string templatePath = "D:\\Milan1\\Projects\\CrudOperations(P)\\BlazorApp1\\Pages\\Templet.html";
        string htmlContent = System.IO.File.ReadAllText(templatePath);
        //string htmlContent = "<html><body><h1>Hello!</h1><p>This is an example email.</p></body></html>";

        emailService.SendEmail(recipientEmail, subject, htmlContent);
    }
}